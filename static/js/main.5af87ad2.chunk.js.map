{"version":3,"sources":["data/api.ts","ui/FixedHeightFlexContainer.tsx","ui/AutoSizedFixedHeightList.tsx","helper/hooks.ts","ui/screens/DistrictsListScreen.tsx","ui/screens/DistrictScreen.tsx","ui/screens/StartScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getDistricts","signal","a","url","URL","searchParams","append","fetch","toString","response","json","jsonData","features","map","f","attributes","DailyLocationData","date","dailyCases","sumCases","this","Date","Meldedatum","AnzahlFall","SummeFall","getDataForLocation","location","getPopulationCountForLocation","EWZ","FixedHeightFlexContainer","props","appBarHeight","useMedia","query","style","height","display","flexFlow","AutoSizedFixedHeightList","width","itemCount","items","length","itemSize","index","createElement","itemComponent","item","useDataApi","initialArgument","api","useState","argument","setArgument","Empty","state","setState","useEffect","shouldLoad","controller","AbortController","Loading","data","result","aborted","Success","Error","fetchData","abort","BaseState","message","DistrictsListScreen","setTitle","filter","setFilter","closed","isLoading","outlined","value","onChange","event","currentTarget","margin","flex","color","icon","isSuccess","district","Landkreis","toLowerCase","includes","ListItem","isError","tag","Link","to","text","DistrictScreen","useParams","dailyData","popCount","SuccessContent","labels","d","inzidenzValues","Array","from","_","j","padding","use","moment","format","toFixed","title","chart","Line","values","Bar","GraphCard","timespan","setTimespan","timespanNumber","parseInt","React","slice","datasets","backgroundColor","borderColor","options","scales","xAxes","type","time","tooltipFormat","displayFormats","day","yAxes","ticks","beginAtZero","tooltips","displayColors","callbacks","label","yLabel","elements","point","radius","hitRadius","legend","StartScreen","raised","children","App","open","setOpen","large","document","drawerItems","onClick","drawer","overflowY","position","modal","dismissible","onClose","basename","fixed","navigationIcon","onNav","actionItems","overflow","Screens","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5af87ad2.chunk.js","sourcesContent":["interface ApiReponse<T> {\r\n    readonly features: Array<Feature<T>>\r\n}\r\n\r\ninterface Feature<T> {\r\n    readonly attributes: T\r\n}\r\n\r\nexport interface District {\r\n    readonly Landkreis: string\r\n}\r\n\r\nexport async function getDistricts(signal: AbortSignal){\r\n    const url = new URL(\"https://services7.arcgis.com/mOBPykOjAyBO2ZKk/ArcGIS/rest/services/Covid19_RKI_Sums/FeatureServer/0/query\")\r\n    url.searchParams.append(\"where\", \"1=1\")\r\n    url.searchParams.append(\"outFields\", \"Landkreis\")\r\n    url.searchParams.append(\"returnDistinctValues\", \"true\")\r\n    url.searchParams.append(\"orderByFields\", \"Landkreis\")\r\n    url.searchParams.append(\"f\", \"json\")\r\n    const response = await fetch(url.toString(),{signal: signal} )\r\n    const json = await response.json()\r\n    const jsonData = json as ApiReponse<District>\r\n\r\n    return jsonData.features.map((f) => f.attributes)\r\n}\r\n\r\ninterface DailyLocationDataJson {\r\n    readonly AnzahlFall: number,\r\n    readonly SummeFall: number,\r\n    readonly Meldedatum: number\r\n}\r\n\r\nexport class DailyLocationData {\r\n    constructor(\r\n        json: DailyLocationDataJson\r\n    ) {\r\n        this.date = new Date(json.Meldedatum)\r\n        this.dailyCases = json.AnzahlFall\r\n        this.sumCases = json.SummeFall\r\n    }\r\n    readonly date: Date\r\n    readonly dailyCases: number\r\n    readonly sumCases: number\r\n}\r\n\r\nexport async function getDataForLocation(signal: AbortSignal, location: string){\r\n    const url = new URL(\"https://services7.arcgis.com/mOBPykOjAyBO2ZKk/ArcGIS/rest/services/Covid19_RKI_Sums/FeatureServer/0/query\")\r\n    url.searchParams.append(\"where\", `Landkreis='${location}'`)\r\n    url.searchParams.append(\"outFields\", \"AnzahlFall,Meldedatum,SummeFall\")\r\n    url.searchParams.append(\"orderByFields\",\"Meldedatum DESC\")\r\n    url.searchParams.append(\"f\", \"json\")\r\n    const response = await fetch(url.toString(),{signal: signal} )\r\n    const json = await response.json()\r\n    const jsonData = json as ApiReponse<DailyLocationDataJson>\r\n\r\n    return jsonData.features.map((f) => new DailyLocationData(f.attributes))\r\n}\r\n\r\nexport interface LocationPopulationCount {\r\n    readonly EWZ: number,\r\n}\r\n\r\nexport async function getPopulationCountForLocation(signal: AbortSignal, location: string){\r\n    const url = new URL(\"https://services7.arcgis.com/mOBPykOjAyBO2ZKk/ArcGIS/rest/services/RKI_Landkreisdaten/FeatureServer/0/query\")\r\n    url.searchParams.append(\"where\", `county='${location}'`)\r\n    url.searchParams.append(\"outFields\", \"EWZ\")\r\n    url.searchParams.append(\"f\", \"json\")\r\n    const response = await fetch(url.toString(),{signal: signal} )\r\n    const json = await response.json()\r\n    const jsonData = json as ApiReponse<LocationPopulationCount>\r\n\r\n    return jsonData.features[0].attributes.EWZ\r\n}\r\n","import React, {FunctionComponent} from \"react\";\r\nimport {useMedia} from \"react-media\";\r\n\r\nexport const FixedHeightFlexContainer: FunctionComponent = (props) => {\r\n    const small = useMedia({query: '(max-width: 599px)'})\r\n    const appBarHeight = small ? \"56\" : \"64\"\r\n\r\n    return (\r\n        <div\r\n            style = {{\r\n                height: `calc(100vh - ${appBarHeight}px)`,\r\n                display: 'flex',\r\n                flexFlow: \"column\",\r\n            }}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n","import React, {createElement, FunctionComponent} from \"react\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport {FixedSizeList} from \"react-window\";\r\n\r\nexport const AutoSizedFixedHeightList = <T,>(props: {\r\n    style?: React.CSSProperties,\r\n    items: T[],\r\n    itemSize: number,\r\n    itemComponent: FunctionComponent<{item: T}>\r\n}) => {\r\n    return(\r\n        <AutoSizer>{({height, width}) => (\r\n            <FixedSizeList\r\n                height={height}\r\n                itemCount={props.items.length}\r\n                itemSize={props.itemSize}\r\n                style={props.style}\r\n                width={width}\r\n            >{({ index, style }) => (\r\n                <div\r\n                    style={style}>\r\n                    {createElement(props.itemComponent, {\r\n                        item: props.items[index]\r\n                    })}\r\n                </div>\r\n            )}</FixedSizeList>\r\n        )}</AutoSizer>\r\n    )\r\n}","import {Dispatch, SetStateAction, useEffect, useState} from \"react\";\r\n\r\nexport type Argument<T> =\r\n    {\r\n        shouldLoad: true,\r\n        data: T\r\n    } |\r\n    {\r\n        shouldLoad: false,\r\n    }\r\n\r\n// export enum Status {\r\n//     EMPTY,\r\n//     LOADING,\r\n//     SUCCESS,\r\n//     ERROR\r\n// }\r\n//\r\n// const f = {\r\n//     map: function <T, S>(transform: ((data: S) => T)): Data<T> {\r\n//         const data = this as Data<S>\r\n//         switch (data.status) {\r\n//             case Status.EMPTY: return data\r\n//             case Status.LOADING: return data\r\n//             case Status.SUCCESS: return {status: Status.SUCCESS, data: transform(data.data), ...f}\r\n//             case Status.ERROR: return data\r\n//         }\r\n//     }\r\n// }\r\n//\r\n// const Empty = {\r\n//     status: Status.EMPTY,\r\n//     ...f\r\n// }\r\n//\r\n// export type Data<S> =\r\n//     {\r\n//         status: Status.EMPTY\r\n//     } |\r\n//     {\r\n//         status: Status.LOADING,\r\n//     } |\r\n//     {\r\n//         status: Status.ERROR\r\n//         message: string,\r\n//     } |\r\n//     {\r\n//         status: Status.SUCCESS\r\n//         data: S,\r\n//     }\r\n    // ) & {\r\n//     map: <T>(transform: (data: S) => T) => Data<T>\r\n// }\r\n\r\nexport const useDataApi = <T, S>(\r\n    initialArgument: Argument<T>,\r\n    api: (signal: AbortSignal, argument: T, ) => Promise<S>,\r\n): [BaseState<S>, Argument<T>, Dispatch<SetStateAction<Argument<T>>>] => {\r\n    const [argument, setArgument] = useState<Argument<T>>(initialArgument);\r\n    const [state, setState] = useState<BaseState<S>>(Empty);\r\n\r\n    useEffect(() => {\r\n        if(argument.shouldLoad){\r\n            const controller = new AbortController()\r\n\r\n            const fetchData = async () => {\r\n                setState(Loading);\r\n\r\n                try {\r\n                    const result = await api(controller.signal, argument.data,);\r\n\r\n                    if (!controller.signal.aborted) {\r\n                        setState(new Success(result));\r\n                    }\r\n                } catch (error) {\r\n                    if (!controller.signal.aborted) {\r\n                        setState(new Error(\"error\"));\r\n                    }\r\n                }\r\n            };\r\n            fetchData();\r\n            return () => {\r\n                controller.abort();\r\n            };\r\n        } else {\r\n            setState(Empty)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [argument]);\r\n\r\n    return [state, argument, setArgument];\r\n}\r\n\r\n// export type Data<T> = typeof Loading | StateSuccess<T> | StateError<T> | StateEmpty<T>\r\n\r\nexport abstract class BaseState<T>{\r\n    isEmpty(): boolean{\r\n        return this === Empty\r\n    }\r\n    isLoading(): boolean{\r\n        return this === Loading\r\n    }\r\n    isSuccess(): this is Success<T> {\r\n        return this instanceof Success\r\n    }\r\n    isError(): this is Error {\r\n        return this instanceof Error\r\n    }\r\n}\r\n\r\nconst Loading = new class extends BaseState<any> {}()\r\nconst Empty = new class extends BaseState<any> {}()\r\n\r\nclass Success<T> extends BaseState<T> {\r\n    constructor(\r\n        readonly data: T,\r\n    ) {super()}\r\n}\r\n\r\nclass Error extends BaseState<any> {\r\n    constructor(\r\n        readonly message: string,\r\n    ) {super()}\r\n}\r\n\r\n// export class StateEmpty<T> extends BaseState<T> {\r\n//     status = Status.EMPTY\r\n//     map<S>(transform: (data: T) => S): StateEmpty<S>{\r\n//         return new StateEmpty()\r\n//     }\r\n// }\r\n\r\n// enum Action {\r\n//     INIT,\r\n//     SUCCESS,\r\n//     FAILURE\r\n// }\r\n\r\n// const dataFetchReducer = <S>(\r\n//     state: DataState<S>,\r\n//     action: {\r\n//         type: Action,\r\n//         data: S | null\r\n//     }): DataState<S> => {\r\n//     switch (action.type) {\r\n//         case Action.INIT:\r\n//             return new StateLoading();\r\n//         case Action.SUCCESS:\r\n//             return new StateSuccess(action.data);\r\n//         case Action.FAILURE:\r\n//             return new StateError(\"unkown error\");\r\n//         default:\r\n//             throw new Error();\r\n//     }\r\n// };\r\n// export class foo{}","import React, {FunctionComponent, useEffect, useState} from \"react\";\r\n\r\nimport {SimpleListItem} from \"@rmwc/list\";\r\nimport \"@rmwc/list/styles\"\r\nimport {LinearProgress} from \"@rmwc/linear-progress\";\r\nimport \"@rmwc/linear-progress/styles\"\r\nimport {TextField} from \"@rmwc/textfield\";\r\nimport \"@rmwc/textfield/styles\"\r\n\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {District, getDistricts} from \"../../data/api\";\r\nimport {FixedHeightFlexContainer} from \"../FixedHeightFlexContainer\";\r\nimport {AutoSizedFixedHeightList} from \"../AutoSizedFixedHeightList\";\r\nimport {useDataApi} from \"../../helper/hooks\";\r\nimport {TitleComponent} from \"../TitleComponent\";\r\n\r\nexport const DistrictsListScreen: TitleComponent = (props) => {\r\n    useEffect(() => props.setTitle(\"Regionen\"))\r\n    const [state] = useDataApi(\r\n        {\r\n            shouldLoad: true,\r\n            data: null\r\n        },\r\n        async (signal: AbortSignal) => {\r\n            return await getDistricts(signal)\r\n        }\r\n    )\r\n    const [filter, setFilter] = useState(\"\")\r\n\r\n    return (\r\n        <FixedHeightFlexContainer>\r\n            <LinearProgress\r\n                closed={!state.isLoading()}\r\n            />\r\n            <TextField\r\n                outlined\r\n                value={filter}\r\n                onChange={event => setFilter(event.currentTarget.value)}\r\n                style={{\r\n                    margin: \"4px 4px 0px\",\r\n                    flex: '0 1 auto',\r\n                    color: \"var(--mdc-theme-on-surface)\"\r\n                }}\r\n                icon=\"search\"\r\n            />\r\n            <div\r\n                style={{flex: '1 1 auto',}}\r\n            >\r\n                {state.isSuccess() &&\r\n                <AutoSizedFixedHeightList\r\n                    items={state.data.filter(district => district.Landkreis.toLowerCase().includes(filter.toLowerCase()))}\r\n                    itemSize={48}\r\n                    itemComponent={ListItem}\r\n                />\r\n                }\r\n                {state.isError() &&\r\n                <div>{state.message}</div>\r\n                }\r\n            </div>\r\n        </FixedHeightFlexContainer>\r\n    )\r\n}\r\n\r\nconst ListItem: FunctionComponent<{ item: District }> = ({item}) => (\r\n    <SimpleListItem\r\n        tag={Link}\r\n        to={`/districts/${item.Landkreis}`}\r\n        text={item.Landkreis}>\r\n    </SimpleListItem>\r\n)\r\n\r\nexport function delay(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}","import React, {FunctionComponent, useEffect, useState} from \"react\";\r\n\r\nimport {Typography} from \"@rmwc/typography\";\r\nimport \"@rmwc/typography/styles\"\r\nimport {LinearProgress} from \"@rmwc/linear-progress\";\r\nimport \"@rmwc/linear-progress/styles\"\r\nimport {Card} from \"@rmwc/card\";\r\nimport \"@rmwc/card/styles\"\r\nimport {Select} from \"@rmwc/select\"\r\nimport \"@rmwc/select/styles\"\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDataApi} from \"../../helper/hooks\";\r\nimport {\r\n    DailyLocationData,\r\n    getDataForLocation,\r\n    getPopulationCountForLocation\r\n} from \"../../data/api\";\r\nimport {TitleComponent} from \"../TitleComponent\";\r\nimport ChartComponent, {Bar, ChartComponentProps, Line} from \"react-chartjs-2\";\r\nimport Chart from \"chart.js\";\r\nimport moment from \"moment\";\r\n\r\nexport const DistrictScreen: TitleComponent = ({setTitle}) => {\r\n    const {district} = useParams<{ district: string }>()\r\n    useEffect(() => {\r\n        setTitle(district)\r\n    })\r\n    const [state] = useDataApi(\r\n        {\r\n            shouldLoad: true,\r\n            data: null\r\n        },\r\n        async (signal: AbortSignal) => {\r\n            return {\r\n                dailyData: await getDataForLocation(signal, district),\r\n                popCount: await getPopulationCountForLocation(signal, district)\r\n            }\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <LinearProgress\r\n                closed={!state.isLoading()}\r\n            />\r\n            {state.isSuccess() &&\r\n            <SuccessContent {...state.data}/>\r\n            }\r\n            {state.isError() &&\r\n            state.message\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SuccessContent: FunctionComponent<{ dailyData: DailyLocationData[], popCount: number }> = ({dailyData, popCount}) => {\r\n\r\n    const labels = dailyData.map(d => d.date)\r\n    const inzidenzValues = Array.from(\r\n        {length: dailyData.length - 7},\r\n        (_, j) => (dailyData[j].sumCases - dailyData[j + 7].sumCases) * 100000 / popCount\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                style={{\r\n                    padding: \"4px\",\r\n                    margin: \"4px\",\r\n                }}>\r\n                <Typography use={\"body1\"}>\r\n                    Letze Meldung: {moment(dailyData[0].date).format('DD.MM.YYYY')}<br/>\r\n                    Gesamte Fälle: {dailyData[0].sumCases}<br/>\r\n                    Inzidenz: {inzidenzValues[0].toFixed(1)}<br/>\r\n                    Einwohner: {popCount}<br/>\r\n                </Typography>\r\n            </Card>\r\n            <GraphCard\r\n                title={'Inzidenz'}\r\n                chart={Line}\r\n                labels={labels}\r\n                values={inzidenzValues}>\r\n            </GraphCard>\r\n            <GraphCard\r\n                title={'Gemeldete Fälle pro Tag'}\r\n                chart={Bar}\r\n                labels={labels}\r\n                values={dailyData.map((d) => d.dailyCases)}>\r\n            </GraphCard>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst GraphCard: FunctionComponent<{\r\n    title: string,\r\n    chart: typeof ChartComponent,\r\n    labels: Date[],\r\n    values: number[]\r\n}> = ({\r\n    title,\r\n    chart,\r\n    labels,\r\n    values\r\n},) => {\r\n    const [timespan, setTimespan] = useState<Timespan>(\"30\")\r\n    const timespanNumber = parseInt(timespan)\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                padding: \"4px\",\r\n                margin: \"4px\",\r\n            }}>\r\n            <Typography use={\"headline5\"}>\r\n                {title}: {values[0].toFixed(1)}\r\n            </Typography>\r\n            {React.createElement(chart as any, {\r\n                data: {\r\n                    labels: labels.slice(0, timespanNumber),\r\n                    datasets: [{\r\n                        data: values.slice(0, timespanNumber),\r\n                        backgroundColor: '#004DA880',\r\n                        borderColor: '#004DA8'\r\n                    }],\r\n                },\r\n                options: {\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: \"time\",\r\n                            time: {\r\n                                tooltipFormat: 'DD.MM.YYYY',\r\n                                displayFormats: {day: 'DD.MM'}\r\n                            },\r\n                        }],\r\n                        yAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                            },\r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        displayColors: false,\r\n                        callbacks: {\r\n                            label(item: Chart.ChartTooltipItem) {\r\n                                return (item.yLabel as number).toFixed(1)\r\n                            },\r\n                        },\r\n                    },\r\n                    elements: {\r\n                        point: {\r\n                            radius: 0,\r\n                            hitRadius: 25\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        display: false\r\n                    }\r\n                }\r\n            } as ChartComponentProps)}\r\n            <div\r\n                style={{\r\n                    margin: '8px',\r\n                    width: 'min-content',\r\n                }}\r\n            >\r\n                <Select\r\n                    label='Dauer'\r\n                    outlined\r\n                    value={timespan}\r\n                    options={[\r\n                        {\r\n                            label: '30 Tage',\r\n                            value: '30'\r\n                        },\r\n                        {\r\n                            label: '60 Tage',\r\n                            value: '60'\r\n                        },\r\n                        {\r\n                            label: '180 Tage',\r\n                            value: '180'\r\n                        }\r\n                    ]}\r\n                    onChange={(event) => setTimespan(event.currentTarget.value as Timespan)}\r\n                />\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\ntype Timespan = '30' | \"60\" | \"180\"","import React, {useEffect} from \"react\";\r\nimport {TitleComponent} from \"../TitleComponent\";\r\nimport {Button} from \"@rmwc/button\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const StartScreen: TitleComponent = (props) => {\r\n    useEffect(() => props.setTitle(\"Home\"))\r\n    return(\r\n        <div>\r\n            <Button\r\n                raised\r\n                style={{\r\n                    margin: \"4px\"\r\n                }}\r\n                tag={Link}\r\n                to={\"/districts\"}\r\n                children={\"Wähle Region\"}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport {useMedia} from \"react-media\";\nimport {BrowserRouter, Link, Route, Switch} from 'react-router-dom';\n\nimport {List, ListItem} from '@rmwc/list';\nimport '@rmwc/list/styles';\nimport {Drawer, DrawerAppContent, DrawerContent} from '@rmwc/drawer'\nimport '@rmwc/drawer/styles';\nimport {SimpleTopAppBar, TopAppBarFixedAdjust} from '@rmwc/top-app-bar';\nimport '@rmwc/top-app-bar/styles';\n\nimport {DistrictsListScreen} from \"./ui/screens/DistrictsListScreen\";\nimport {DistrictScreen} from \"./ui/screens/DistrictScreen\";\nimport {StartScreen} from \"./ui/screens/StartScreen\";\nimport packageJson from '../package.json'\n\n// const initialTitle = \"Title\"\n// const TitleContext = React.createContext<[string, (title: string) => void]>(\n//     [\n//         initialTitle,\n//         (title: string) => {}\n//     ]\n// )\n//\n// const TitleStateProvider = ({ children }: PropsWithChildren<any>) => {\n//     const [title, setTitle] = useState(initialTitle)\n//     const titleContextValue = useMemo<[string, (title: string) => void]>(() => ([title, setTitle]), [title])\n//     return (\n//         <TitleContext.Provider value={titleContextValue}>\n//             {children}\n//         </TitleContext.Provider>\n//     );\n// };\n//\n// export const useTitleState = () => React.useContext(TitleContext)\n//\n// export const App = () =>{ return(\n//     // <TitleStateProvider>\n//         <AppContent/>\n//     // </TitleStateProvider>\n// )}\n\nexport const App = () => {\n    const [open, setOpen] = useState(false)\n    const [title, setTitle] = useState(\"Title\")\n    // const [isDarkMode, setDarkMode] = useState(false)\n\n    const large = useMedia({query: \"(min-width: 800px)\"})\n\n    useEffect(() => {\n        document.title = title\n    }, [title])\n\n    const topBarActions: { onClick: () => void; icon: string }[] = [\n        // {\n        //     icon: isDarkMode ? 'brightness_1' : \"brightness_7\",\n        //     onClick: () => setDarkMode(!isDarkMode)\n        // },\n    ];\n\n    const drawerItems = <List>\n        <ListItem\n            tag={Link}\n            to={\"/\"}\n            children={\"Home\"}\n            onClick={() => {\n                if (!large) setOpen(!open)\n            }}\n        />\n        <ListItem\n            tag={Link}\n            to={\"/districts\"}\n            children={\"Regionen\"}\n            onClick={() => {\n                if (!large) setOpen(!open)\n            }}\n        />\n    </List>\n\n    const drawer = <Drawer\n        style={{\n            overflowY: 'auto',\n            position: 'fixed',\n        }}\n        modal={!large}\n        dismissible={large}\n        open={open}\n        onClose={() => setOpen(false)}\n    >\n        <DrawerContent>\n            {!large && <TopAppBarFixedAdjust/>}\n            {drawerItems}\n        </DrawerContent>\n        {large && <TopAppBarFixedAdjust/>}\n    </Drawer>\n\n    return (\n        <BrowserRouter basename=\"/reacttest\">\n            <div>\n                {!large && drawer}\n\n                <SimpleTopAppBar\n                    fixed\n                    title={title}\n                    navigationIcon\n                    onNav={() => setOpen(!open)}\n                    actionItems={topBarActions}\n                />\n                <TopAppBarFixedAdjust/>\n\n                {large && drawer}\n\n                <DrawerAppContent\n                    style={{\n                        overflow: 'hidden',\n                    }}>\n                    <Screens setTitle={setTitle}/>\n                </DrawerAppContent>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nconst Screens = (props: {setTitle: (title: string) => void}) => {\n    return (\n        <Switch>\n            <Route path=\"/districts/:district\" children={<DistrictScreen setTitle={props.setTitle}/>} />\n            <Route path=\"/districts\" children={<DistrictsListScreen setTitle={props.setTitle}/>} />\n            <Route path=\"/\" children={<StartScreen setTitle={props.setTitle}/>}/>\n        </Switch>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}